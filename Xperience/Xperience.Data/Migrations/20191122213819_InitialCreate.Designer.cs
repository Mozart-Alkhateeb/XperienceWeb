// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Xperience.Data;

namespace Xperience.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191122213819_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Xperience.Data.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Blocks", b =>
                {
                    b.Property<int>("Blocked_id")
                        .HasColumnType("int");

                    b.Property<int>("Blocker_id")
                        .HasColumnType("int");

                    b.HasKey("Blocked_id", "Blocker_id");

                    b.HasIndex("Blocker_id");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Categories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Post_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Post_id");

                    b.HasIndex("User_id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Xperience.Data.Entities.ConnectionRequests", b =>
                {
                    b.Property<int>("Connected_id")
                        .HasColumnType("int");

                    b.Property<int>("Connector_id")
                        .HasColumnType("int");

                    b.HasKey("Connected_id", "Connector_id");

                    b.HasIndex("Connector_id");

                    b.ToTable("Connection_Requests");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Connections", b =>
                {
                    b.Property<int>("Connector_id")
                        .HasColumnType("int");

                    b.Property<int>("Connected_id")
                        .HasColumnType("int");

                    b.HasKey("Connector_id", "Connected_id");

                    b.HasAlternateKey("Connected_id", "Connector_id");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Xperience.Data.Entities.ConnectorInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("id");

                    b.ToTable("ConnectorInfos");
                });

            modelBuilder.Entity("Xperience.Data.Entities.ConnectorInterests", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Category_id")
                        .HasColumnType("int");

                    b.HasKey("Id", "Category_id");

                    b.HasAlternateKey("Category_id", "Id");

                    b.ToTable("ConnectorInterests");
                });

            modelBuilder.Entity("Xperience.Data.Entities.ConnectorSites", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Location_id")
                        .HasColumnType("int");

                    b.HasKey("Id", "Location_id");

                    b.HasIndex("Location_id");

                    b.ToTable("Connector_Sites");
                });

            modelBuilder.Entity("Xperience.Data.Entities.FollowedSites", b =>
                {
                    b.Property<int>("Follower_id")
                        .HasColumnType("int");

                    b.Property<int>("Followed_id")
                        .HasColumnType("int");

                    b.HasKey("Follower_id", "Followed_id");

                    b.HasAlternateKey("Followed_id", "Follower_id");

                    b.ToTable("FollowedSites");
                });

            modelBuilder.Entity("Xperience.Data.Entities.FollowedUsers", b =>
                {
                    b.Property<int>("Followed_id")
                        .HasColumnType("int");

                    b.Property<int>("Follower_id")
                        .HasColumnType("int");

                    b.HasKey("Followed_id", "Follower_id");

                    b.HasIndex("Follower_id");

                    b.ToTable("FollowedUsers");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Hashtags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hashtags");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Languages", b =>
                {
                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Locations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Nationalities", b =>
                {
                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Posts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hashtag_id")
                        .HasColumnType("int");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Site_id")
                        .HasColumnType("int");

                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Hashtag_id");

                    b.HasIndex("Site_id");

                    b.HasIndex("User_id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Ratings", b =>
                {
                    b.Property<int>("Rater_id")
                        .HasColumnType("int");

                    b.Property<int>("Rated_id")
                        .HasColumnType("int");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.HasKey("Rater_id", "Rated_id");

                    b.HasAlternateKey("Rated_id", "Rater_id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Xperience.Data.Entities.ReactionIcons", b =>
                {
                    b.Property<int>("Reaction_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Reaction_id");

                    b.ToTable("Reaction_Icons");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Reactions", b =>
                {
                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<int>("Post_id")
                        .HasColumnType("int");

                    b.Property<int>("Reaction_id")
                        .HasColumnType("int");

                    b.HasKey("User_id", "Post_id");

                    b.HasAlternateKey("Post_id", "User_id");

                    b.HasIndex("Reaction_id");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Religions");
                });

            modelBuilder.Entity("Xperience.Data.Entities.ReportedPosts", b =>
                {
                    b.Property<int>("Reporter_id")
                        .HasColumnType("int");

                    b.Property<int>("Post_id")
                        .HasColumnType("int");

                    b.HasKey("Reporter_id", "Post_id");

                    b.HasAlternateKey("Post_id", "Reporter_id");

                    b.ToTable("ReportedPosts");
                });

            modelBuilder.Entity("Xperience.Data.Entities.ReportedSites", b =>
                {
                    b.Property<int>("Reporter_id")
                        .HasColumnType("int");

                    b.Property<int>("Reported_id")
                        .HasColumnType("int");

                    b.HasKey("Reporter_id", "Reported_id");

                    b.HasAlternateKey("Reported_id", "Reporter_id");

                    b.ToTable("Reported_Sites");
                });

            modelBuilder.Entity("Xperience.Data.Entities.ReportedUsers", b =>
                {
                    b.Property<int>("Reporter_id")
                        .HasColumnType("int");

                    b.Property<int>("Reported_id")
                        .HasColumnType("int");

                    b.HasKey("Reporter_id", "Reported_id");

                    b.HasAlternateKey("Reported_id", "Reporter_id");

                    b.ToTable("ReportedUsers");
                });

            modelBuilder.Entity("Xperience.Data.Entities.SiteReviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reviewer_id")
                        .HasColumnType("int");

                    b.Property<int>("Site_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Reviewer_id");

                    b.HasIndex("Site_id");

                    b.ToTable("Site_Reviews");
                });

            modelBuilder.Entity("Xperience.Data.Entities.SiteVotes", b =>
                {
                    b.Property<int>("User_id")
                        .HasColumnType("int");

                    b.Property<int>("Site_id")
                        .HasColumnType("int");

                    b.Property<bool>("Vote")
                        .HasColumnType("bit");

                    b.HasKey("User_id", "Site_id");

                    b.HasAlternateKey("Site_id", "User_id");

                    b.ToTable("Site_Votes");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Sites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category_id")
                        .HasColumnType("int");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<int>("Location_id")
                        .HasColumnType("int");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category_id");

                    b.HasIndex("Location_id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Post_id")
                        .HasColumnType("int");

                    b.Property<int>("Tagged_id")
                        .HasColumnType("int");

                    b.Property<int>("Tagger_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Post_id");

                    b.HasIndex("Tagged_id");

                    b.HasIndex("Tagger_id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Xperience.Data.Entities.UserReviews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reviewed_id")
                        .HasColumnType("int");

                    b.Property<int>("Reviewer_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Reviewed_id");

                    b.HasIndex("Reviewer_id");

                    b.ToTable("User_Reviews");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Connector_status")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Location_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profile_pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Religion_id")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Location_id");

                    b.HasIndex("Religion_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Xperience.Data.Entities.Blocks", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "Blocked")
                        .WithMany()
                        .HasForeignKey("Blocked_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Blocker")
                        .WithMany()
                        .HasForeignKey("Blocker_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.Comments", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Posts", "Comment_post_id")
                        .WithMany()
                        .HasForeignKey("Post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Comment_user_id")
                        .WithMany()
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.ConnectionRequests", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "User_connected_id")
                        .WithMany()
                        .HasForeignKey("Connected_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "User_connector_id")
                        .WithMany()
                        .HasForeignKey("Connector_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.Connections", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "Connected")
                        .WithMany("UsersConnected")
                        .HasForeignKey("Connected_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Connectors")
                        .WithMany("UsersConnectors")
                        .HasForeignKey("Connector_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.ConnectorInfo", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "Connector_info_id")
                        .WithMany()
                        .HasForeignKey("id");
                });

            modelBuilder.Entity("Xperience.Data.Entities.ConnectorInterests", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Categories", "Connector_interests_categories")
                        .WithMany()
                        .HasForeignKey("Category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Connector_interets_id")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.ConnectorSites", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "Connector_sites_id")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Locations", "Location_connector_sites")
                        .WithMany()
                        .HasForeignKey("Location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.FollowedSites", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Sites", "Followed_sites_id")
                        .WithMany()
                        .HasForeignKey("Followed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Followed_sites_user")
                        .WithMany()
                        .HasForeignKey("Follower_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.FollowedUsers", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "FollowedUser")
                        .WithMany()
                        .HasForeignKey("Followed_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "FollowerUser")
                        .WithMany()
                        .HasForeignKey("Follower_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.Languages", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "Languages_user_id")
                        .WithMany()
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.Nationalities", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "Nationalities_user_id")
                        .WithMany("Nationalities")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.Posts", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Hashtags", "Posts_hashtag_id")
                        .WithMany()
                        .HasForeignKey("Hashtag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Sites", "Posts_site_id")
                        .WithMany()
                        .HasForeignKey("Site_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Posts_user_id")
                        .WithMany()
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.Ratings", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "Rated_user")
                        .WithMany()
                        .HasForeignKey("Rated_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Rater_user")
                        .WithMany()
                        .HasForeignKey("Rater_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.Reactions", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Posts", "Posts")
                        .WithMany()
                        .HasForeignKey("Post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.ReactionIcons", "Reaction_Icons")
                        .WithMany()
                        .HasForeignKey("Reaction_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.ReportedPosts", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Posts", "Reported_post_id")
                        .WithMany()
                        .HasForeignKey("Post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Reported_posts_user")
                        .WithMany()
                        .HasForeignKey("Reporter_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.ReportedSites", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Sites", "Reported_sites_site")
                        .WithMany("Reported_Sites")
                        .HasForeignKey("Reported_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Reported_sites_user")
                        .WithMany("ReporterUser")
                        .HasForeignKey("Reporter_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.ReportedUsers", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "Reported")
                        .WithMany()
                        .HasForeignKey("Reported_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Reporter")
                        .WithMany()
                        .HasForeignKey("Reporter_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.SiteReviews", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "Users")
                        .WithMany("Reviews")
                        .HasForeignKey("Reviewer_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Sites", "Sites")
                        .WithMany("Reviews")
                        .HasForeignKey("Site_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.SiteVotes", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Sites", "Sites")
                        .WithMany("Votes")
                        .HasForeignKey("Site_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Users")
                        .WithMany("Votes")
                        .HasForeignKey("User_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.Sites", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Categories", "Categories")
                        .WithMany("Sites_category_id")
                        .HasForeignKey("Category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Locations", "Locations")
                        .WithMany("Sites")
                        .HasForeignKey("Location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.Tags", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Posts", "Tags_post")
                        .WithMany()
                        .HasForeignKey("Post_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Tags_tagged")
                        .WithMany()
                        .HasForeignKey("Tagged_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "Tags_tagger")
                        .WithMany()
                        .HasForeignKey("Tagger_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.UserReviews", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Users", "User_Reviews_user2")
                        .WithMany("Reviewed")
                        .HasForeignKey("Reviewed_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Users", "User_reviews_user1")
                        .WithMany("Reviewer")
                        .HasForeignKey("Reviewer_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Xperience.Data.Entities.Users", b =>
                {
                    b.HasOne("Xperience.Data.Entities.Locations", "Location")
                        .WithMany("Users")
                        .HasForeignKey("Location_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Xperience.Data.Entities.Religion", "Religion")
                        .WithMany("Users")
                        .HasForeignKey("Religion_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
